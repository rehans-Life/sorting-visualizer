/* eslint-disable react-hooks/exhaustive-deps */
import Head from "next/head";
import { useEffect, useRef, useState } from "react";
import Element from "../components/Element";
import Navbar from "../components/Navbar";
import styles from "../styles/Home.module.css";
import { timeComplexities } from "../utils/data";
import { generateRandomArray } from "../utils/generateRandomArray";

export class Bar {
  constructor(value, backgroundColor, ctx) {
    this.value = value;
    this.backgroundColor = backgroundColor;
    this.level = 0;
    this.audioCtx = ctx;
    this.playNote = () => {
      let osc = this.audioCtx.createOscillator();
      let node = this.audioCtx.createGain();
      const dura = 0.1;
      osc.frequency.value = +(this.value + 225);
      node.gain.value = 0.1;
      node.gain.linearRampToValueAtTime(0, this.audioCtx.currentTime + dura);
      osc.connect(node);
      node.connect(this.audioCtx.destination);
      osc.start(0);
      osc.stop(this.audioCtx.currentTime + dura);
    };
  }
}

export default function Home() {
  const [array, setArray] = useState([]);
  const [bars, setBars] = useState(0);
  const [height, setHeight] = useState(0);
  const [selectedAlgo, setSelectedAlgo] = useState(null);
  const arrRef = useRef();
  const containerRef = useRef();
  const navRef = useRef();

  useEffect(() => {
    const findBars = () => {
      let width = arrRef.current.clientWidth;
      let height =
        containerRef.current.clientHeight - navRef.current.clientHeight - 100;
      let bars = width > 800 ? Math.floor(width / 18) : Math.floor(width / 14);
      setBars(bars);
      setHeight(height);
    };
    window.onresize = findBars;
    findBars();
  }, []);

  useEffect(() => {
    let ctx = new AudioContext();
    setArray(generateRandomArray(bars, height, ctx));
  }, [bars, height]);

  return (
    <div ref={containerRef} className={styles.container}>
      <Head>
        <title>Sound Sorting Visualizer</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/logo.png" />
      </Head>
      <Navbar
        navRef={navRef}
        array={array}
        setArray={setArray}
        setSelectedAlgo={setSelectedAlgo}
        selectedAlgo={selectedAlgo}
        height={height}
        bars={bars}
      />
      {selectedAlgo && (
        <div className={styles.timeComplexities}>
          <h4>
            <b>{selectedAlgo}</b>:
          </h4>
          {Object.entries(timeComplexities[selectedAlgo]).map(
            ([c, t], index) => (
              <p key={index}>
                {c}: {t}
              </p>
            )
          )}
        </div>
      )}
      <div ref={arrRef} className={styles.array}>
        {array.map(({ value, backgroundColor }, index) => (
          <Element
            key={index}
            value={value}
            backgroundColor={backgroundColor}
          />
        ))}
      </div>
    </div>
  );
}
